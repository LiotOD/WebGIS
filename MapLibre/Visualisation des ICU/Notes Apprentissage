Mon apprentissage avec Map Libre

/* 1- Démmarage */

- Créer un fichier html basique
- Créer un autre fichier css et un js en les liant au html 
    (<link rel="stylesheet" href="styles.css"> dans le header 
    <script src="https://cdn.maptiler.com/maptiler-sdk-js/v2.0.3/maptiler-sdk.umd.min.js"></script>
    <script src="script.js"></script> dans le body)
- Dans le js on ajoute la clé API et la variable map avec const map = new maptilersdk.Map({ options,}) un peu comme avec openlayers

/* 2- Customisation basique */
les fonctions s'ajoutent en utilisant new Maptilersdk.NomDeLaFonction

#Changer le centrage : pointer les coordonnées sur la zone voulue et définir le zoom par défaut avec les paramètres center et zoom.

#Ajouter un Marqueur : 
      - Créer la variable
      - Utiliser la fonction .Marker en spécifiant les coordonnées avec .setLngLat([])
      - Finir avec .addTo(map)

#### POINT IMPORTANT ####
-- Il faut ajouter d'abord un gestionnaire d'évènements avant d'ajouter des couches vectorielles --
      map.on('load', function() {
      
      });
#### FIN ####

#Ajouter la symbologie des icones
ici contrairement à openlayers on ajoute la symbologie/style avant la donnée. Utiliser la fonction map.loadImage avec la source.
        map.loadImage('./icon-plane-512.png', async function(error, image){
          if (error) throw error;
          map.addImage('plane', image);
        });
---------------- Explication du code ---------

1. map.loadImage('./icon-plane-512.png', async function(error, image) { ... });
map.loadImage : Cette méthode charge une image depuis une URL ou un chemin local. Dans ce cas, elle charge l'image icon-plane-512.png depuis le répertoire local.
'./icon-plane-512.png' : Chemin vers l'image à charger. Il s'agit d'une image d'icône d'avion (plane).
async function(error, image) : Fonction de rappel (callback) asynchrone qui s'exécute une fois que l'image est chargée. Deux paramètres sont passés à cette fonction :
error : Si le chargement de l'image échoue, cette variable contiendra l'erreur.
image : Si le chargement est réussi, cette variable contiendra l'image chargée.

2. if (error) throw error;
Cette ligne vérifie si une erreur s'est produite lors du chargement de l'image. Si c'est le cas, elle lance l'erreur en interrompant l'exécution du reste du code. Cela évite que l'application ne continue à s'exécuter avec une image manquante.

3. map.addImage('plane', image);
map.addImage('plane', image); : Cette méthode ajoute l'image chargée à la carte.
'plane' : Nom de l'image ou de l'icône que tu peux utiliser plus tard pour référencer cette image dans d'autres parties du code (par exemple, pour afficher cette icône à différents endroits sur la carte).
image : L'objet image qui a été chargé via loadImage.

---------------- FIN  ---------

#Ajouter des points 

Mon apprentissage avec le dsk de MapTiler

/* 1- Démmarage */

- Créer un fichier html basique
- Créer un autre fichier css et un js en les liant au html 
    (<link rel="stylesheet" href="styles.css"> dans le header 
    <script src="https://cdn.maptiler.com/maptiler-sdk-js/v2.0.3/maptiler-sdk.umd.min.js"></script>
    <script src="script.js"></script> dans le body)
- Dans le js on ajoute la clé API et la variable map avec const map = new maptilersdk.Map({ options,}) un peu comme avec openlayers

/* 2- Customisation basique */
les fonctions s'ajoutent en utilisant new Maptilersdk.NomDeLaFonction

#Changer le centrage : pointer les coordonnées sur la zone voulue et définir le zoom par défaut avec les paramètres center et zoom.

/* 2-1- Ajouter un Marqueur */
                  - Créer la variable
                  - Utiliser la fonction .Marker en spécifiant les coordonnées avec .setLngLat([])
                  - Finir avec .addTo(map)
            
            #### POINT IMPORTANT ####
            -- Il faut ajouter d'abord un gestionnaire d'évènements avant d'ajouter des couches vectorielles --
                  map.on('load', function() {
                  
                  });
            #### FIN ####

/* 2-2- IMPORTANT : STRUCTURE DES SYNTAXES PRINCIPALES */     

            1- #######Structure de la syntaxe avec le gestionnaire d'évènement #######
            
            -----> map.on('load', function ()| //gestionnaire d'évènement
                                             |---> Image //source de l'image
                                             |---> addImage //ajouter l'image
                                             |---> addSource //source de la donnée
                                             |---> addLayer //ajouter la donnée
                                             |---> Image2 //source de l'image 2
                                             |---> addImage //ajouter l'image 2
                                             |---> addSource //source de la donnée 2
                                             |---> addLayer //ajouter la donnée 2
                                             |---> addSource //source de la donnée 3
                                             |---> addLayer //ajouter la donnée 3
                                             |---> map.on('click', 'couche_concernée', function ()  // ajouter un évènement sur une couche : par ex ici lors de l'évènement clic
                                                             |---> Coordonnées // récupérer les valeurs des coordonnées de chaque élément de la couche
                                                             |---> Autre variable // récupérer l'info voulue
                                                             |---> Popup //ajouter une popup 
                                                             |---> addLayer //ajouter la donnée 3
            
            #### FIN ####

            2- #######Structure de la syntaxe pour ajouter une image #######
            
            ----->    const image = await map.loadImage('chemin vers l'image');
                      map.addImage('nomdelobjetimage', image.data);
            
            #### FIN ####


            3- #######Structure de la syntaxe pour ajouter une source de données #######
            
            ----->  addSource| //'nomdelavariabledonnee',{
                                 |---> type // le type de la data : geojson, vector, raster, etc.
                                 |---> url // ajouter l'url si c'est une tuile vectorielle
                                 |---> data // source de la donnée si c'est du geojson
                            }
            #### FIN ####

            4- #######Structure de la syntaxe pour ajouter une couche associée à la source #######
            
            ----->  addLayer | {
                                 |---> id // identifiant unique de la couche
                                 |---> source // source de la donnée (mettre le nom de la variable déclarée dans addSource correspondant
                                 |---> type // mettre le type de symbologie qu'on veut appliquer à la couche "fill", "line", "symbol", "circle", "heatmap", "fill-extrusion", "raster", "hillshade", "background".
                                 |---> source layer // identifiant unique de la couche présente dans la tuile vectorielle. Ce n'est pas forcément le nom donnée à la tuile (il peut avoir plusieurs couches dans une tuile vectorielle'
                                 |---> layout  {// ici il faut mettre les détails pour l'icone si on va sur un type de symbologie symbol
                                                    |---> icon-image : la source de l'icone , // si on l'avait déclaré précédemment, il faut juste mettre le nom de la variable sinon faire la déclaration ici avec un const et un map.addImage
                                                    |---> icon-size : valeur, // taille voulue pour l'icone
                                                    |---> etc          
                                 |---> paint // ici il faut mettre les détails associés au type de symbologie par exemple la couleur, l'opacité, les bordures etc.
                                                    |---> fill-color : valeur,// couleur
                                                    |---> fill-opacity : valeur, // opacité
                                                    |---> etc
                             }
            #### FIN ####

            5- #######Structure de la syntaxe pour ajouter un popup  #######
            
            ----->  addSource| //'nomdelavariabledonnee',{
                                 |---> type // le type de la data : geojson, vector, raster, etc.
                                 |---> url // ajouter l'url si c'est une tuile vectorielle
                                 |---> data // source de la donnée si c'est du geojson
                            }
            #### FIN ####
